{% extends 'base.html.twig' %}

{% block title %}New Announce{% endblock %}

{% block body %}
    <h1>Create new Announce</h1>
<div class="row">
    <div class="col-md-4"></div>

    <div class="col-md-4">
    {{ include('announce_user/_form.html.twig') }}
    </div>
    <div class="col-md-4"></div>
</div>
    <div class="row">
        <div id="map" style="height: 100%; width: 100px;"></div>
    </div>

    <a href="{{ path('announce_index') }}">back to list</a>
{% endblock %}
{% block javascripts %}
    <script>

        $('#announce_adresse').attr('id', 'autocomplete');
        $('#announce_road').attr('id', 'route');
        $('#announce_streetNumber').attr('id', 'street_number');
        $('#announce_country').attr('id', 'country');
        $('#announce_city').attr('id', 'locality');
        $('#announce_region').attr('id', 'administrative_area_level_1');
        $('#announce_codePostal').attr('id', 'postal_code');
        $('#announce_departement').attr('id', 'administrative_area_level_2');


        // This example displays an address form, using the autocomplete feature
        // of the Google Places API to help users fill in the information.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            administrative_area_level_2: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
                {types: ['geocode']});

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        /* Déclaration des variables  */
        var geocoder;
        var map;
        var markers = new Array();
        var i = 0;

        /* Initialisation de la carte  */
        function initialize() {
            /* Instanciation du geocoder  */
            geocoder = new google.maps.Geocoder();
            var paris = new google.maps.LatLng(48.8566667, 2.3509871);
            var myOptions = {
                zoom: 4,
                center: paris,
                mapTypeId: google.maps.MapTypeId.HYBRID
            }
            /* Chargement de la carte  */
            map = new google.maps.Map(document.getElementById("map"), myOptions);
        }

        /* Fonction de géocodage déclenchée en cliquant surle bouton "Geocoder"  */
        function codeAddress() {
            /* Récupération de la valeur de l'adresse saisie */
            var address = document.getElementById("autocomplete").value;
            /* Appel au service de geocodage avec l'adresse en paramètre */
            geocoder.geocode( { 'address': address}, function(results, status) {
                /* Si l'adresse a pu être géolocalisée */
                if (status == google.maps.GeocoderStatus.OK) {
                    /* Récupération de sa latitude et de sa longitude */
                    document.getElementById('lat').value = results[0].geometry.location.lat();
                    document.getElementById('lng').value = results[0].geometry.location.lng();
                    map.setCenter(results[0].geometry.location);
                    /* Affichage du marker */
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    /* Permet de supprimer le marker précédemment affiché */
                    markers.push(marker);
                    if(markers.length > 1)
                        markers[(i-1)].setMap(null);
                    i++;
                } else {
                    alert("Le geocodage n\'a pu etre effectue pour la raison suivante: " + status);
                }
            });
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAunYqnfgZZ556LQsSqSxNMqtmkqRkfvc8&&callback=initMap&&libraries=places&callback=initAutocomplete" async defer></script>


{% endblock %}